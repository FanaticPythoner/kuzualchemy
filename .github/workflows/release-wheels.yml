# SPDX-FileCopyrightText: 2025 FanaticPythoner
# SPDX-License-Identifier: Apache-2.0

name: Build and Publish Release Wheels

"on":
  # @@ STEP 1: Trigger on all releases and pre-releases
  release:
    types: [published, prereleased]
  
  # @@ STEP 2: Trigger on all tags (covers cases where releases are created from tags)
  push:
    tags:
      - 'v*'
      - '*.*.*'
      - '*.*.*-*'  # Pre-release tags like 1.0.0-alpha.1, 1.0.0-beta.2, etc.
  
  # @@ STEP 3: Manual trigger for testing and emergency releases
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (leave empty to use tag/release version)'
        required: false
        type: string
      publish_to_pypi:
        description: 'Publish to PyPI after building'
        required: false
        type: boolean
        default: true
      publish_to_test_pypi:
        description: 'Publish to Test PyPI after building'
        required: false
        type: boolean
        default: false

jobs:
  # @@ STEP 4: Determine version and release type
  determine-version:
    name: Determine Version and Release Type
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
      should_publish: ${{ steps.version.outputs.should_publish }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install toml packaging
          
      - name: Determine version and release type
        id: version
        run: |
          # || S.S. Mathematical logic to determine version from multiple sources
          VERSION=""
          IS_PRERELEASE="false"
          SHOULD_PUBLISH="true"
          
          # Priority 1: Manual input version
          if [ -n "${{ inputs.version }}" ]; then
            VERSION="${{ inputs.version }}"
            echo "Using manual input version: $VERSION"
          
          # Priority 2: Release event
          elif [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
            # Remove 'v' prefix if present
            VERSION="${VERSION#v}"
            
            if [ "${{ github.event.release.prerelease }}" = "true" ]; then
              IS_PRERELEASE="true"
            fi
            echo "Using release version: $VERSION (prerelease: $IS_PRERELEASE)"
          
          # Priority 3: Tag push
          elif [ "${{ github.event_name }}" = "push" ] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION="${{ github.ref_name }}"
            # Remove 'v' prefix if present
            VERSION="${VERSION#v}"
            
            # || S.S. Mathematical detection of pre-release patterns
            if [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+-(alpha|beta|rc|dev|pre) ]]; then
              IS_PRERELEASE="true"
            fi
            echo "Using tag version: $VERSION (prerelease: $IS_PRERELEASE)"
          
          # Priority 4: Extract from pyproject.toml
          else
            VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
            echo "Using pyproject.toml version: $VERSION"
            
            # || S.S. Mathematical detection of dev versions
            if [[ "$VERSION" =~ \.dev[0-9]+ ]]; then
              IS_PRERELEASE="true"
            fi
          fi
          
          # Validate version format
          if [ -z "$VERSION" ]; then
            echo "ERROR: Could not determine version"
            exit 1
          fi
          
          # || S.S. Mathematical validation of semantic versioning
          if ! python -c "from packaging.version import Version; Version('$VERSION')" 2>/dev/null; then
            echo "ERROR: Invalid version format: $VERSION"
            exit 1
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "should_publish=$SHOULD_PUBLISH" >> $GITHUB_OUTPUT
          
          echo "## Version Determination Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **Is Prerelease**: $IS_PRERELEASE" >> $GITHUB_STEP_SUMMARY
          echo "- **Should Publish**: $SHOULD_PUBLISH" >> $GITHUB_STEP_SUMMARY
          echo "- **Event**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Ref**: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY

  # @@ STEP 5: Build comprehensive wheels for all platforms
  build-wheels:
    name: Build Release Wheels
    needs: [determine-version]
    uses: ./.github/workflows/build-wheels.yml
    with:
      version: ${{ needs.determine-version.outputs.version }}
      upload_artifacts: true
      artifact_name_suffix: "release"
      build_sdist: true
      build_wheels: true

  # @@ STEP 6: Run tests on built wheels to ensure quality
  test-wheels:
    name: Test Built Wheels
    runs-on: ${{ matrix.os }}
    needs: [determine-version, build-wheels]
    strategy:
      fail-fast: false
      matrix:
        # || S.S. OS in ALPHABETICAL order, Python versions from OLDEST to NEWEST
        os: [macos-latest, ubuntu-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13']
        
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Download wheel artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-${{ matrix.os }}-*
          path: wheels/
          merge-multiple: true
          
      - name: Install and test wheel
        run: |
          # Find the appropriate wheel for this platform and Python version
          WHEEL_FILE=$(find wheels/ -name "*cp${{ matrix.python-version }}*" -name "*.whl" | head -1)
          
          if [ -z "$WHEEL_FILE" ]; then
            echo "No wheel found for Python ${{ matrix.python-version }} on ${{ matrix.os }}"
            exit 1
          fi
          
          echo "Testing wheel: $WHEEL_FILE"
          
          # Install the wheel
          python -m pip install --upgrade pip
          python -m pip install "$WHEEL_FILE"
          
          # Basic import test
          python -c "import kuzualchemy; print(f'Successfully imported kuzualchemy version: {kuzualchemy.__version__ if hasattr(kuzualchemy, \"__version__\") else \"unknown\"}')"
          
          # Install test dependencies and run basic tests
          python -m pip install pytest pytest-asyncio pytest-mock
          
          # Run a subset of tests to verify the wheel works
          if [ -d "tests" ]; then
            python -m pytest tests/ -v --tb=short -x --maxfail=3 || echo "Some tests failed, but wheel installation was successful"
          fi
        shell: bash

  # @@ STEP 7: Publish to PyPI (production and test)
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [determine-version, build-wheels, test-wheels]
    if: >
      always() &&
      github.actor != 'nektos/act' &&
      needs.determine-version.outputs.should_publish == 'true' &&
      (needs.test-wheels.result == 'success' || needs.test-wheels.result == 'skipped') &&
      needs.build-wheels.result == 'success'

    environment: ${{ needs.determine-version.outputs.is_prerelease == 'true' && 'testpypi' || 'pypi' }}
    
    permissions:
      id-token: write
      contents: read
      
    steps:
      - name: Download sorted, deduplicated artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "sorted-wheels-*"
          path: dist/
          merge-multiple: true

      - name: Verify distribution files
        run: |
          echo "Distribution files prepared:"
          ls -la dist/

          # Verify we have files to publish
          if [ ! "$(ls -A dist/)" ]; then
            echo "ERROR: No distribution files found"
            exit 1
          fi
          
      - name: Verify distribution files
        run: |
          python -m pip install --upgrade pip twine
          python -m twine check dist/*
          
      - name: Publish to Test PyPI
        if: >
          needs.determine-version.outputs.is_prerelease == 'true' || 
          github.event.inputs.publish_to_test_pypi == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true
          verbose: true
          
      - name: Publish to PyPI
        if: >
          needs.determine-version.outputs.is_prerelease == 'false' && 
          github.event.inputs.publish_to_test_pypi != 'true' &&
          (github.event.inputs.publish_to_pypi == 'true' || github.event.inputs.publish_to_pypi == null)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
          verbose: true
          
      - name: Publication summary
        run: |
          VERSION="${{ needs.determine-version.outputs.version }}"
          IS_PRERELEASE="${{ needs.determine-version.outputs.is_prerelease }}"
          
          echo "## Publication Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **Is Prerelease**: $IS_PRERELEASE" >> $GITHUB_STEP_SUMMARY
          
          if [ "$IS_PRERELEASE" = "true" ]; then
            echo "- **Published to**: Test PyPI" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Published to**: PyPI" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "- **Files Published**: $(ls dist/ | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Published Files:" >> $GITHUB_STEP_SUMMARY
          ls dist/ | while read file; do
            echo "- $file" >> $GITHUB_STEP_SUMMARY
          done
