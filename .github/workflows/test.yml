name: Run Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_call:

jobs:
  test:
    runs-on: ubuntu-latest
    # Skip if commit is from auto-release workflow to avoid unnecessary test runs
    if: "!contains(github.event.head_commit.message, 'chore: update README.md with version') && !contains(github.event.head_commit.message, '[auto-release-skip]')"
    outputs:
      test-passed: ${{ steps.pytest.outputs.passed }}
      test-failed: ${{ steps.pytest.outputs.failed }}
      test-error: ${{ steps.pytest.outputs.error }}
      test-total: ${{ steps.pytest.outputs.total }}
      test-summary: ${{ steps.pytest.outputs.summary }}
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -e ".[test]"

    - name: Install pytest-json-report
      run: |
        python -m pip install pytest-json-report

    - name: Run tests with pytest
      id: pytest
      run: |
        if [ "${{ matrix.python-version }}" = "3.11" ]; then
          # Run tests and capture results (only for Python 3.11 to avoid duplicate outputs)
          python -m pytest tests/ -v --tb=short --json-report --json-report-file=test-results.json > pytest_output.txt 2>&1 || true

          # Parse test results
          if [ -f test-results.json ]; then
            # Extract test counts using Python one-liner
            PASSED=$(python -c "import json; data=json.load(open('test-results.json')); print(data.get('summary', {}).get('passed', 0))")
            FAILED=$(python -c "import json; data=json.load(open('test-results.json')); print(data.get('summary', {}).get('failed', 0))")
            ERROR=$(python -c "import json; data=json.load(open('test-results.json')); print(data.get('summary', {}).get('error', 0))")
            TOTAL=$(python -c "import json; data=json.load(open('test-results.json')); print(data.get('summary', {}).get('total', 0))")

            echo "PYTEST_PASSED=$PASSED"
            echo "PYTEST_FAILED=$FAILED"
            echo "PYTEST_ERROR=$ERROR"
            echo "PYTEST_TOTAL=$TOTAL"

            echo "passed=$PASSED" >> $GITHUB_OUTPUT
            echo "failed=$FAILED" >> $GITHUB_OUTPUT
            echo "error=$ERROR" >> $GITHUB_OUTPUT
            echo "total=$TOTAL" >> $GITHUB_OUTPUT

            # Extract the pytest summary line
            if [ -f pytest_output.txt ]; then
              # Find the summary line with passed and timing info, then clean it
              SUMMARY_LINE=$(grep -E "=+ .* passed.* in .* =+" pytest_output.txt | tail -1)
              if [ -n "$SUMMARY_LINE" ]; then
                # Extract content between = signs and remove warnings
                SUMMARY=$(echo "$SUMMARY_LINE" | sed 's/^=*[[:space:]]*//' | sed 's/[[:space:]]*=*$//' | sed 's/, [0-9]* warnings//')
                echo "Test summary: $SUMMARY"
                echo "summary=$SUMMARY" >> $GITHUB_OUTPUT
              else
                echo "summary=$PASSED passed" >> $GITHUB_OUTPUT
              fi
            else
              echo "summary=$PASSED passed" >> $GITHUB_OUTPUT
            fi
          else
            echo "No test results file found"
            echo "passed=0" >> $GITHUB_OUTPUT
            echo "failed=0" >> $GITHUB_OUTPUT
            echo "error=1" >> $GITHUB_OUTPUT
            echo "total=1" >> $GITHUB_OUTPUT
            echo "summary=Tests failed" >> $GITHUB_OUTPUT
          fi

          # Clean up
          rm -f test-results.json pytest_output.txt
        else
          # For other Python versions, just run tests normally
          python -m pytest tests/ -v --tb=short
        fi

    - name: Run tests with coverage
      if: matrix.python-version == '3.11'
      run: |
        python -m pip install pytest-cov
        python -m pytest tests/ -v --tb=short --cov=src/kuzualchemy --cov-report=xml --cov-report=term
