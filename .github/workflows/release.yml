# SPDX-FileCopyrightText: 2025 FanaticPythoner
# SPDX-License-Identifier: Apache-2.0

name: Release (tagged)

on:
  push:
    tags:
      - "v*.*.*"        # GLOB for SemVer-like tags

permissions:
  contents: write
  id-token: write      # REQUIRED for PyPI Trusted Publishers (OIDC)

concurrency:
  group: release-${{ github.ref_name }}
  cancel-in-progress: false

jobs:
  release:
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify pyproject version == tag
        shell: bash
        run: |
          set -euo pipefail
          TAG="${{ github.ref_name }}"
          TAG_VER="${TAG#v}"
          PROJ_VER="$(python -c 'import tomllib; print((tomllib.load(open("pyproject.toml","rb")).get("project") or {}).get("version") or "")')"
          [ -n "${PROJ_VER}" ] || { echo "ERROR: [project].version missing"; exit 2; }
          [ "${PROJ_VER}" = "${TAG_VER}" ] || { echo "pyproject version ${PROJ_VER} != tag ${TAG_VER}"; exit 1; }
          echo "Version OK: ${PROJ_VER} == ${TAG_VER}"

      - id: pack
        name: Build artifacts
        uses: ./.github/actions/build-dist
        with:
          python_version: "3.12"

      - name: Create/Update Release (purge + upload)
        uses: ./.github/actions/release-assets
        with:
          release_tag: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          prerelease: "false"
          purge_existing_assets: "true"
          create_or_move_tag: "false"
          dist_dir: ${{ steps.pack.outputs.dist_dir }}

      - name: Publish to PyPI (Trusted Publishers)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: ${{ steps.pack.outputs.dist_dir }}
          skip-existing: true

      # Hard verification without heredocs
      - name: Verify release visible on PyPI
        shell: bash
        run: |
          set -euo pipefail
          NAME="$(python -c 'import tomllib; print((tomllib.load(open("pyproject.toml","rb")).get("project") or {}).get("name") or "")')"
          [ -n "${NAME}" ] || { echo "ERROR: project.name missing"; exit 2; }
          TAG="${{ github.ref_name }}"
          VER="${TAG#v}"
          echo "Checking PyPI for ${NAME}==${VER} â€¦"
          for i in $(seq 1 36); do
            OK="$(curl -fsSL "https://pypi.org/pypi/${NAME}/json" \
                 | python -c 'import sys,json,os; d=json.load(sys.stdin); v=os.environ.get("VER",""); print("OK" if v in (d.get("releases") or {}) else "MISS")' \
                   )"
            if [ "${OK}" = "OK" ]; then
              echo "PyPI has ${NAME}==${VER}"
              exit 0
            fi
            sleep 5
          done
          echo "ERROR: ${NAME}==${VER} not visible on PyPI after publish window." >&2
          exit 1

      - name: Summary
        if: always()
        run: |
          {
            echo "## Release summary"
            echo "- tag: ${{ github.ref_name }}"
            echo "- published_to_pypi: ${{ job.status == 'success' && 'true' || 'false' }}"
          } >> "$GITHUB_STEP_SUMMARY"
