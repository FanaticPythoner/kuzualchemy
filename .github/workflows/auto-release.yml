name: Auto Release on Main Push

on:
  push:
    branches: [ main ]

jobs:
  test:
    name: Run Tests Before Release
    uses: ./.github/workflows/test.yml

  auto-release:
    name: Automatic Versioning and Release
    runs-on: ubuntu-latest
    needs: test
    # Skip if commit is from auto-release workflow to prevent infinite loop
    if: "!contains(github.event.head_commit.message, 'chore: update README.md with version') && !contains(github.event.head_commit.message, '[auto-release-skip]')"

    permissions:
      contents: write
      id-token: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for version calculation
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine wheel setuptools toml packaging
          
      - name: Extract current version from pyproject.toml
        id: extract_version
        run: |
          # Extract version using Python to ensure accuracy
          CURRENT_VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version in pyproject.toml: $CURRENT_VERSION"
          
      - name: Check if version changed in current commit
        id: version_changed
        run: |
          # Check if pyproject.toml version line changed in current commit
          if git show HEAD --name-only | grep -q "pyproject.toml"; then
            # pyproject.toml was modified, check if version line specifically changed
            if git show HEAD -- pyproject.toml | grep -E "^[+-].*version.*="; then
              echo "version_changed=true" >> $GITHUB_OUTPUT
              echo "Version changed in current commit"
            else
              echo "version_changed=false" >> $GITHUB_OUTPUT
              echo "pyproject.toml changed but version line unchanged"
            fi
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
            echo "pyproject.toml not modified in current commit"
          fi
          
      - name: Calculate dev version if needed
        id: calculate_version
        run: |
          CURRENT_VERSION="${{ steps.extract_version.outputs.current_version }}"
          VERSION_CHANGED="${{ steps.version_changed.outputs.version_changed }}"
          
          if [ "$VERSION_CHANGED" = "true" ]; then
            # Use the version from pyproject.toml as-is (real release)
            FINAL_VERSION="$CURRENT_VERSION"
            RELEASE_TYPE="release"
            echo "Using real release version: $FINAL_VERSION"
          else
            # Generate dev version
            # Find when the current version was introduced
            VERSION_COMMIT=$(git log --oneline -S "version = \"$CURRENT_VERSION\"" pyproject.toml | tail -1 | cut -d' ' -f1)

            if [ -z "$VERSION_COMMIT" ]; then
              # If we can't find when current version was introduced, count all commits
              DEV_NUMBER=$(git rev-list --count HEAD)
              echo "No version history found, counting all commits: $DEV_NUMBER"
            else
              # Count commits since the version was introduced (exclusive of version commit)
              DEV_NUMBER=$(git rev-list --count ${VERSION_COMMIT}..HEAD)
              echo "Found $DEV_NUMBER commits since version $CURRENT_VERSION was introduced ($VERSION_COMMIT)"

              # If no commits since version introduction, use 1
              if [ "$DEV_NUMBER" -eq 0 ]; then
                DEV_NUMBER=1
                echo "No commits since version introduction, using dev1"
              fi
            fi
            
            FINAL_VERSION="${CURRENT_VERSION}.dev${DEV_NUMBER}"
            RELEASE_TYPE="prerelease"
            echo "Generated dev version: $FINAL_VERSION"
          fi
          
          echo "final_version=$FINAL_VERSION" >> $GITHUB_OUTPUT
          echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
          echo "Final version: $FINAL_VERSION (type: $RELEASE_TYPE)"
          
      - name: Update pyproject.toml with final version
        run: |
          FINAL_VERSION="${{ steps.calculate_version.outputs.final_version }}"

          # Create Python script to update version
          cat > update_version.py << 'EOF'
          import toml
          import sys
          import os

          final_version = os.environ['FINAL_VERSION']

          # Read current pyproject.toml
          with open('pyproject.toml', 'r') as f:
              data = toml.load(f)

          # Update version
          data['project']['version'] = final_version

          # Write back to file
          with open('pyproject.toml', 'w') as f:
              toml.dump(data, f)

          print(f'Updated pyproject.toml version to: {final_version}')
          EOF

          # Run the update script
          FINAL_VERSION="$FINAL_VERSION" python update_version.py

          # Verify the update
          UPDATED_VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
          echo "Verified updated version: $UPDATED_VERSION"

          # Clean up
          rm update_version.py

      - name: Update README.md with dynamic version and status
        run: |
          FINAL_VERSION="${{ steps.calculate_version.outputs.final_version }}"

          # Create Python script to calculate status and update README
          cat > update_readme.py << 'EOF'
          import re
          import os
          from packaging import version

          def calculate_status(version_str: str) -> str:
              """Calculate status based on version ranges."""
              # Remove dev suffix for status calculation
              clean_version = re.sub(r'\.dev\d+$', '', version_str)
              v = version.parse(clean_version)

              if v < version.parse("0.5.0"):
                  return "Alpha"
              elif v < version.parse("1.0.0"):
                  return "Beta"
              elif v < version.parse("2.0.0"):
                  return "Release Candidate"
              else:
                  return "Stable Release"

          # Get version from environment
          final_version = os.environ['FINAL_VERSION']
          status = calculate_status(final_version)

          # Read README.md
          with open('README.md', 'r', encoding='utf-8') as f:
              content = f.read()

          # Replace placeholders
          content = content.replace('{{VERSION}}', final_version)
          content = content.replace('{{STATUS}}', status)

          # Write back to README.md
          with open('README.md', 'w', encoding='utf-8') as f:
              f.write(content)

          print(f'Updated README.md: Version={final_version}, Status={status}')
          EOF

          # Run the update script
          FINAL_VERSION="$FINAL_VERSION" python update_readme.py

          # Verify the update
          echo "README.md updated with:"
          head -10 README.md | grep -E "(Version|Status)"

          # Clean up
          rm update_readme.py

      - name: Commit updated README.md
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Check if README.md was actually changed
          if git diff --quiet README.md; then
            echo "README.md unchanged, skipping commit"
          else
            echo "README.md changed, committing update"
            git add README.md
            git commit -m "chore: update README.md with version ${{ steps.calculate_version.outputs.final_version }} and status [auto-release-skip]

            - Version: ${{ steps.calculate_version.outputs.final_version }}
            - Status: Auto-calculated based on version ranges
            - Updated by: GitHub Actions auto-release workflow"

            # Push the commit
            git push origin main
            echo "README.md committed and pushed"
          fi

      - name: Build package
        run: |
          python -m build
          
      - name: Verify built artifacts
        run: |
          twine check dist/*
          ls -la dist/
          
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.calculate_version.outputs.final_version }}
          release_name: Release v${{ steps.calculate_version.outputs.final_version }}
          body: |
            Automatic release for version ${{ steps.calculate_version.outputs.final_version }}
            
            **Release Type**: ${{ steps.calculate_version.outputs.release_type }}
            **Commit**: ${{ github.sha }}
            **Branch**: ${{ github.ref_name }}
            
            This release was automatically generated from commit ${{ github.sha }}.
          draft: false
          prerelease: ${{ steps.calculate_version.outputs.release_type == 'prerelease' }}
          
      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true
          verbose: true
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ steps.calculate_version.outputs.final_version }}
          path: dist/
          retention-days: 30
          
      - name: Summary
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.calculate_version.outputs.final_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Type**: ${{ steps.calculate_version.outputs.release_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **PyPI**: Published with skip-existing" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Release**: Created" >> $GITHUB_STEP_SUMMARY
