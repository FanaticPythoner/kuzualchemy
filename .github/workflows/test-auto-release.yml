name: Test Auto Release Logic (Local Testing)

on:
  workflow_dispatch:
  push:
    branches: [ test-auto-release ]

jobs:
  test-versioning-logic:
    name: Test Versioning Logic Only
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for version calculation
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install toml packaging
          
      - name: Extract current version from pyproject.toml
        id: extract_version
        run: |
          # Extract version using Python to ensure accuracy
          CURRENT_VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version in pyproject.toml: $CURRENT_VERSION"
          
      - name: Check if version changed in current commit
        id: version_changed
        run: |
          # Check if pyproject.toml version line changed in current commit
          if git show HEAD --name-only | grep -q "pyproject.toml"; then
            # pyproject.toml was modified, check if version line specifically changed
            if git show HEAD -- pyproject.toml | grep -E "^[+-].*version.*="; then
              echo "version_changed=true" >> $GITHUB_OUTPUT
              echo "[OK] Version changed in current commit"
            else
              echo "version_changed=false" >> $GITHUB_OUTPUT
              echo "[INFO] pyproject.toml changed but version line unchanged"
            fi
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
            echo "[INFO] pyproject.toml not modified in current commit"
          fi
          
      - name: Calculate dev version if needed
        id: calculate_version
        run: |
          CURRENT_VERSION="${{ steps.extract_version.outputs.current_version }}"
          VERSION_CHANGED="${{ steps.version_changed.outputs.version_changed }}"
          
          echo "[INFO] Current version: $CURRENT_VERSION"
          echo "[INFO] Version changed: $VERSION_CHANGED"
          
          if [ "$VERSION_CHANGED" = "true" ]; then
            # Use the version from pyproject.toml as-is (real release)
            FINAL_VERSION="$CURRENT_VERSION"
            RELEASE_TYPE="release"
            echo "[OK] Using real release version: $FINAL_VERSION"
          else
            # Generate dev version
            # Find the last commit that changed the version in pyproject.toml
            echo "[INFO] Looking for last version change commit..."
            
            # More robust way to find last version change
            # First, try to find when the current version was introduced
            VERSION_COMMIT=$(git log --oneline -S "version = \"$CURRENT_VERSION\"" pyproject.toml | tail -1 | cut -d' ' -f1)

            if [ -z "$VERSION_COMMIT" ]; then
              # If we can't find when current version was introduced, count all commits
              DEV_NUMBER=$(git rev-list --count HEAD)
              echo "[INFO] No version history found, counting all commits: $DEV_NUMBER"
            else
              # Count commits since the version was introduced (exclusive of version commit)
              DEV_NUMBER=$(git rev-list --count ${VERSION_COMMIT}..HEAD)
              echo "[INFO] Found $DEV_NUMBER commits since version $CURRENT_VERSION was introduced ($VERSION_COMMIT)"

              # If no commits since version introduction, use 1
              if [ "$DEV_NUMBER" -eq 0 ]; then
                DEV_NUMBER=1
                echo "[INFO] No commits since version introduction, using dev1"
              fi
            fi
            
            FINAL_VERSION="${CURRENT_VERSION}.dev${DEV_NUMBER}"
            RELEASE_TYPE="prerelease"
            echo "[OK] Generated dev version: $FINAL_VERSION"
          fi
          
          echo "final_version=$FINAL_VERSION" >> $GITHUB_OUTPUT
          echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
          echo "[RESULT] Final version: $FINAL_VERSION (type: $RELEASE_TYPE)"
          
      - name: Test version update (dry run)
        run: |
          FINAL_VERSION="${{ steps.calculate_version.outputs.final_version }}"
          
          echo "Testing version update to: $FINAL_VERSION"
          
          # Create Python script to test version update
          cat > test_update_version.py << 'EOF'
          import toml
          import sys
          import os
          
          final_version = os.environ['FINAL_VERSION']
          
          # Read current pyproject.toml
          with open('pyproject.toml', 'r') as f:
              data = toml.load(f)
          
          original_version = data['project']['version']
          
          # Update version
          data['project']['version'] = final_version
          
          print(f'[OK] Would update pyproject.toml version: {original_version} -> {final_version}')
          
          # Don't actually write the file in test mode
          # with open('pyproject.toml', 'w') as f:
          #     toml.dump(data, f)
          EOF
          
          # Run the test script
          FINAL_VERSION="$FINAL_VERSION" python test_update_version.py
          
          # Clean up
          rm test_update_version.py

      - name: Test README.md update (dry run)
        run: |
          FINAL_VERSION="${{ steps.calculate_version.outputs.final_version }}"

          echo "Testing README.md update with version: $FINAL_VERSION"

          # Create Python script to test README update
          cat > test_readme_update.py << 'EOF'
          import re
          import os
          from packaging import version

          def calculate_status(version_str: str) -> str:
              """Calculate status based on version ranges."""
              # Remove dev suffix for status calculation
              clean_version = re.sub(r'\.dev\d+$', '', version_str)
              v = version.parse(clean_version)

              if v < version.parse("0.5.0"):
                  return "Alpha"
              elif v < version.parse("1.0.0"):
                  return "Beta"
              elif v < version.parse("2.0.0"):
                  return "Release Candidate"
              else:
                  return "Stable Release"

          # Get version from environment
          final_version = os.environ['FINAL_VERSION']
          status = calculate_status(final_version)

          # Read current README.md
          with open('README.md', 'r', encoding='utf-8') as f:
              content = f.read()

          # Check if placeholders exist
          if '{{VERSION}}' in content and '{{STATUS}}' in content:
              print(f'[OK] README.md contains placeholders')
              print(f'[OK] Would update: Version={{VERSION}} -> {final_version}')
              print(f'[OK] Would update: Status={{STATUS}} -> {status}')

              # Test the replacement logic
              test_content = content.replace('{{VERSION}}', final_version)
              test_content = test_content.replace('{{STATUS}}', status)

              print(f'[OK] README.md update test successful')
          else:
              print(f'[ERROR] README.md missing placeholders {{VERSION}} or {{STATUS}}')
              exit(1)
          EOF

          # Run the test script
          FINAL_VERSION="$FINAL_VERSION" python test_readme_update.py

          # Clean up
          rm test_readme_update.py

      - name: Test package building (dry run)
        run: |
          echo "[INFO] Testing package building..."
          python -m pip install build
          
          # Test build without actually building
          echo "[OK] Would run: python -m build"
          echo "[OK] Would create dist/ directory with wheel and sdist"
          
      - name: Summary
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Current Version**: ${{ steps.extract_version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version Changed**: ${{ steps.version_changed.outputs.version_changed }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Final Version**: ${{ steps.calculate_version.outputs.final_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Type**: ${{ steps.calculate_version.outputs.release_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          
          echo ""
          echo "[SUCCESS] Versioning logic test completed successfully!"
          echo "   Results:"
          echo "   Current Version: ${{ steps.extract_version.outputs.current_version }}"
          echo "   Version Changed: ${{ steps.version_changed.outputs.version_changed }}"
          echo "   Final Version: ${{ steps.calculate_version.outputs.final_version }}"
          echo "   Release Type: ${{ steps.calculate_version.outputs.release_type }}"
